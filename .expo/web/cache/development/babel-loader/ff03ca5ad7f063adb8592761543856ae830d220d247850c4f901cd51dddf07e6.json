{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport axios from \"axios\";\nimport Geolocation from \"@react-native-community/geolocation\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentDay = _useState2[0],\n    setCurrentDay = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentDate = _useState4[0],\n    setCurrentDate = _useState4[1];\n  useEffect(function () {\n    var interval = setInterval(function () {\n      var dateObj = new Date();\n      setCurrentDay(dateObj.toLocaleDateString(\"en-US\", {\n        weekday: \"long\"\n      }));\n      var month = dateObj.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      var day = dateObj.getDate();\n      setCurrentDate(day + \" \" + month);\n    }, 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    weatherData = _useState6[0],\n    setWeatherData = _useState6[1];\n  useEffect(function () {\n    Geolocation.getCurrentPosition(function (position) {\n      var _position$coords = position.coords,\n        latitude = _position$coords.latitude,\n        longitude = _position$coords.longitude;\n      var URL = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&appid=\" + API_KEY;\n      axios.get(URL).then(function (response) {\n        setWeatherData(response.data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }, function (error) {\n      console.log(error);\n    }, {\n      enableHighAccuracy: true,\n      timeout: 20000,\n      maximumAge: 1000\n    });\n  }, []);\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    weather = _useState8[0],\n    setWeather = _useState8[1];\n  useEffect(function () {\n    var getWeather = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var data = yield fetchWeatherData();\n        setWeather(data);\n      });\n      return function getWeather() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    getWeather();\n  }, []);\n  var weatherIcons = {\n    Clear: require(\"./assets/Sunny.png\"),\n    \"Clear Night\": require(\"./assets/ClearNight.png\"),\n    Clouds: require(\"./assets/Cloudy.png\"),\n    \"Partly Cloudy Day\": require(\"./assets/PartlyCloudyDay.png\"),\n    \"Partly Cloudy Night\": require(\"./assets/PartlyCloudyNight.png\"),\n    Rain: require(\"./assets/Rainy.png\"),\n    Windy: require(\"./assets/Windy.png\"),\n    Snow: require(\"./assets/Snowy.png\")\n  };\n  var weatherIcon = weather ? weatherIcons[weather] : null;\n  var fetchWeatherData = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.get(\"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&appid=\" + API_KEY);\n        var _weather = response.data.weather;\n        return _weather[0].main;\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function fetchWeatherData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    temperature = _useState10[0],\n    setTemperature = _useState10[1];\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function () {\n      var _ref3 = _asyncToGenerator(function* (position) {\n        var _position$coords2 = position.coords,\n          latitude = _position$coords2.latitude,\n          longitude = _position$coords2.longitude;\n        var url = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&appid=\" + API_KEY + \"&units=metric\";\n        var response = yield fetch(url);\n        var data = yield response.json();\n        setTemperature(data.main.temp);\n      });\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }, []);\n  return _jsxs(ImageBackground, {\n    style: styles.backgroundImage,\n    source: require(\"./assets/BG_Gradient.png\"),\n    children: [_jsx(View, {\n      style: styles.Datecontainer,\n      children: _jsx(Text, {\n        children: _jsxs(Text, {\n          style: styles.DateText,\n          children: [currentDay, \", \", currentDate]\n        })\n      })\n    }), _jsx(View, {\n      children: weatherData ? _jsx(View, {\n        style: styles.CurrentLocation,\n        children: _jsx(Text, {\n          style: styles.CurrentLocationText,\n          children: weatherData.name\n        })\n      }) : _jsx(Text, {\n        children: \"Loading...\"\n      })\n    }), _jsxs(View, {\n      style: styles.weatherImage,\n      children: [_jsx(View, {\n        children: _jsx(Image, {\n          source: weatherIcon,\n          style: {\n            width: 150,\n            height: 150\n          }\n        })\n      }), _jsxs(Text, {\n        style: styles.weatherImageText,\n        children: [\" \", weather]\n      })]\n    }), _jsx(View, {\n      style: styles.temp,\n      children: _jsx(Text, {\n        style: styles.tempText,\n        children: temperature ? temperature + \"\\xB0C\" : \"Loading...\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1\n  },\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\"\n  },\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\"\n  },\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\"\n  },\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"2rem\"\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\"\n  },\n  temp: {\n    marginTop: \"1rem\"\n  },\n  tempText: {\n    fontSize: \"4rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","ImageBackground","StyleSheet","Text","View","Image","axios","Geolocation","jsxs","_jsxs","jsx","_jsx","App","_useState","_useState2","_slicedToArray","currentDay","setCurrentDay","_useState3","_useState4","currentDate","setCurrentDate","interval","setInterval","dateObj","Date","toLocaleDateString","weekday","month","toLocaleString","day","getDate","clearInterval","API_KEY","_useState5","_useState6","weatherData","setWeatherData","getCurrentPosition","position","_position$coords","coords","latitude","longitude","URL","get","then","response","data","catch","error","console","log","enableHighAccuracy","timeout","maximumAge","_useState7","_useState8","weather","setWeather","getWeather","_ref","_asyncToGenerator","fetchWeatherData","apply","arguments","weatherIcons","Clear","require","Clouds","Rain","Windy","Snow","weatherIcon","_ref2","main","_useState9","_useState10","temperature","setTemperature","navigator","geolocation","_ref3","_position$coords2","url","fetch","json","temp","_x","style","styles","backgroundImage","source","children","Datecontainer","DateText","CurrentLocation","CurrentLocationText","name","weatherImage","width","height","weatherImageText","tempText","create","flex","alignItems","justifyContent","paddingTop","fontFamily","fontSize","color","fontStyle","fontWeight","textAlign","fontVariant","marginTop"],"sources":["F:/Weather-App/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ImageBackground, StyleSheet, Text, View, Image } from \"react-native\";\nimport axios from \"axios\";\nimport Geolocation from \"@react-native-community/geolocation\";\n\nexport default function App() {\n  // Day, Date, Month Fetch Function Starts\n\n  const [currentDay, setCurrentDay] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const dateObj = new Date();\n      setCurrentDay(dateObj.toLocaleDateString(\"en-US\", { weekday: \"long\" }));\n      const month = dateObj.toLocaleString(\"default\", { month: \"long\" });\n      const day = dateObj.getDate();\n      setCurrentDate(`${day} ${month}`);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Day, Date, Month Fetch Function Ends\n\n  // API KEY INFO Starts\n\n  const API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\n\n  // API KEY INFO Ends\n\n  // Location Fetching Starts\n\n  const [weatherData, setWeatherData] = useState(null);\n\n  useEffect(() => {\n    Geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords;\n        const URL = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n        axios\n          .get(URL)\n          .then((response) => {\n            setWeatherData(response.data);\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      },\n      (error) => {\n        console.log(error);\n      },\n      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\n    );\n  }, []);\n\n  // Location Fetching Ends\n\n  // Weather Data Fetching Starts\n\n  const [weather, setWeather] = useState(null);\n\n  useEffect(() => {\n    const getWeather = async () => {\n      const data = await fetchWeatherData();\n      setWeather(data);\n    };\n    getWeather();\n  }, []);\n\n  // Weather Data Fetching Ends\n\n  //Wether Conditiion Image Fetching Starts\n\n  const weatherIcons = {\n    Clear: require(\"./assets/Sunny.png\"),\n    \"Clear Night\": require(\"./assets/ClearNight.png\"),\n    Clouds: require(\"./assets/Cloudy.png\"),\n    \"Partly Cloudy Day\": require(\"./assets/PartlyCloudyDay.png\"),\n    \"Partly Cloudy Night\": require(\"./assets/PartlyCloudyNight.png\"),\n    Rain: require(\"./assets/Rainy.png\"),\n    Windy: require(\"./assets/Windy.png\"),\n    Snow: require(\"./assets/Snowy.png\"),\n  };\n\n  const weatherIcon = weather ? weatherIcons[weather] : null;\n\n  //Weather Condition Fetching Ends\n\n  //Weather Condition Fetching Starts\n\n  const fetchWeatherData = async () => {\n    try {\n      const response = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`\n      );\n      const { weather } = response.data;\n      return weather[0].main;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  //Weather Condition Fetching ends\n\n  // Temperature Fetch By Location Starts\n\n  const [temperature, setTemperature] = useState(null);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(async (position) => {\n      const { latitude, longitude } = position.coords;\n      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setTemperature(data.main.temp);\n    });\n  }, []);\n\n  // Temperature Fetch By Location Ends\n\n  // MAIN RENDER FUNCTION STARTS\n\n  return (\n    <ImageBackground\n      style={styles.backgroundImage}\n      source={require(\"./assets/BG_Gradient.png\")}\n    >\n      <View style={styles.Datecontainer}>\n        <Text>\n          <Text style={styles.DateText}>\n            {currentDay}, {currentDate}\n          </Text>\n        </Text>\n      </View>\n      <View>\n        {weatherData ? (\n          <View style={styles.CurrentLocation}>\n            <Text style={styles.CurrentLocationText}>{weatherData.name}</Text>\n          </View>\n        ) : (\n          <Text>Loading...</Text>\n        )}\n      </View>\n      <View style={styles.weatherImage}>\n        <View>\n          <Image source={weatherIcon} style={{ width: 150, height: 150 }} />\n        </View>\n        <Text style={styles.weatherImageText}> {weather}</Text>\n      </View>\n      <View style={styles.temp}>\n        <Text style={styles.tempText}>\n          {temperature ? `${temperature}°C` : \"Loading...\"}\n        </Text>\n      </View>\n    </ImageBackground>\n  );\n}\n\n// MAIN RENDER FUNCTION ENDS\n\n// STYLESHEET STARTS\n\nconst styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1,\n  },\n\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\",\n  },\n\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\",\n  },\n\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"2rem\",\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n  temp: {\n    marginTop: \"1rem\",\n  },\n  tempText: {\n    fontSize: \"4rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\",\n  },\n});\n\n// STYLESHEET ENDS\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}