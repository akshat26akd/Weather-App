{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport axios from \"axios\";\nimport Geolocation from \"@react-native-community/geolocation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\nvar fetchWeatherData = function () {\n  var _ref = _asyncToGenerator(function* (latitude, longitude) {\n    var url = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&appid=\" + API_KEY + \"&units=metric\";\n    var response = yield fetch(url);\n    var data = yield response.json();\n    console.log(data);\n    return data;\n  });\n  return function fetchWeatherData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getWeatherIcon = function getWeatherIcon(weatherCondition, hour) {\n  var weatherIcons = {\n    Clear: [require(\"./assets/Sunny.png\"), require(\"./assets/ClearNight.png\")],\n    Clouds: require(\"./assets/Cloudy.png\"),\n    Rain: require(\"./assets/Rainy.png\"),\n    Windy: require(\"./assets/Windy.png\"),\n    Snow: require(\"./assets/Snowy.png\")\n  };\n  if (Array.isArray(weatherIcons[weatherCondition])) {\n    if (hour >= 18 || hour <= 6) return weatherIcons[weatherCondition][1];\n    return weatherIcons[weatherCondition][0];\n  }\n  return weatherIcons[weatherCondition];\n};\nexport default function App() {\n  var dateObj = new Date();\n  var dayName = dateObj.toLocaleString(\"default\", {\n    weekday: \"long\"\n  });\n  var month = dateObj.toLocaleString(\"default\", {\n    month: \"long\"\n  });\n  var dayNum = dateObj.getDate();\n  var date = dayName + \", \\\" \\\"\" + dayNum + \" \" + month;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    weatherIcon = _useState4[0],\n    setWeatherIcon = _useState4[1];\n  useEffect(function () {\n    Geolocation.getCurrentPosition(function (position) {\n      var _position$coords = position.coords,\n        latitude = _position$coords.latitude,\n        longitude = _position$coords.longitude;\n      fetchWeatherData(latitude, longitude).then(function (data) {\n        setData(data);\n      });\n    });\n  }, []);\n  useEffect(function () {\n    if (data) {\n      var hour = new Date().getHours();\n      var weatherCondition = data.weather[0].main;\n      var _weatherIcon = getWeatherIcon(weatherCondition, hour);\n      setWeatherIcon(_weatherIcon);\n    }\n  }, [data]);\n  return _jsxs(ImageBackground, {\n    style: styles.backgroundImage,\n    source: require(\"./assets/BG_Gradient.png\"),\n    children: [_jsx(View, {\n      style: styles.Datecontainer,\n      children: _jsx(Text, {\n        children: _jsx(Text, {\n          style: styles.DateText,\n          children: date\n        })\n      })\n    }), _jsx(View, {\n      children: data ? _jsx(View, {\n        style: styles.CurrentLocation,\n        children: _jsx(Text, {\n          style: styles.CurrentLocationText,\n          children: data.name\n        })\n      }) : _jsx(Text, {\n        style: styles.CurrentLocationText,\n        children: \"Loading...\"\n      })\n    }), _jsxs(View, {\n      style: styles.weatherImage,\n      children: [_jsx(View, {\n        children: _jsx(Image, {\n          source: weatherIcon,\n          style: {\n            width: 150,\n            height: 150\n          }\n        })\n      }), _jsxs(Text, {\n        style: styles.weatherImageText,\n        children: [\" \", data ? data.weather[0].main : \"Loading...\"]\n      })]\n    }), _jsx(View, {\n      style: styles.temp,\n      children: _jsx(Text, {\n        style: styles.tempText,\n        children: data ? data.main.temp.toFixed(1) + \"\\xB0C\" : \"Loading...\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1\n  },\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\"\n  },\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\"\n  },\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\"\n  },\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"2rem\"\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    paddingTop: \"1rem\"\n  },\n  temp: {\n    marginTop: \"1rem\"\n  },\n  tempText: {\n    fontSize: \"4rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","ImageBackground","StyleSheet","Text","View","Image","axios","Geolocation","jsx","_jsx","jsxs","_jsxs","API_KEY","fetchWeatherData","_ref","_asyncToGenerator","latitude","longitude","url","response","fetch","data","json","console","log","_x","_x2","apply","arguments","getWeatherIcon","weatherCondition","hour","weatherIcons","Clear","require","Clouds","Rain","Windy","Snow","Array","isArray","App","dateObj","Date","dayName","toLocaleString","weekday","month","dayNum","getDate","date","_useState","_useState2","_slicedToArray","setData","_useState3","_useState4","weatherIcon","setWeatherIcon","getCurrentPosition","position","_position$coords","coords","then","getHours","weather","main","style","styles","backgroundImage","source","children","Datecontainer","DateText","CurrentLocation","CurrentLocationText","name","weatherImage","width","height","weatherImageText","temp","tempText","toFixed","create","flex","alignItems","justifyContent","paddingTop","fontFamily","fontSize","color","fontStyle","fontWeight","textAlign","fontVariant","marginTop"],"sources":["F:/Weather-App/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ImageBackground, StyleSheet, Text, View, Image } from \"react-native\";\nimport axios from \"axios\";\nimport Geolocation from \"@react-native-community/geolocation\";\n\nconst API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\n\nconst fetchWeatherData = async (latitude, longitude) => {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`;\n  const response = await fetch(url);\n  const data = await response.json();\n  console.log(data)\n  return data;\n};\n\nconst getWeatherIcon = (weatherCondition, hour) => {\n  const weatherIcons = {\n    Clear: [\n      require(\"./assets/Sunny.png\"),\n      require(\"./assets/ClearNight.png\"),\n    ],\n    Clouds: require(\"./assets/Cloudy.png\"),\n    Rain: require(\"./assets/Rainy.png\"),\n    Windy: require(\"./assets/Windy.png\"),\n    Snow: require(\"./assets/Snowy.png\"),\n  };\n\n  if (Array.isArray(weatherIcons[weatherCondition])) {\n    if (hour >= 18 || hour <= 6)\n      return weatherIcons[weatherCondition][1];\n    return weatherIcons[weatherCondition][0];\n  }\n  return weatherIcons[weatherCondition];\n}\n\nexport default function App() {\n\n  const dateObj = new Date();\n  const dayName = dateObj.toLocaleString(\"default\", { weekday: \"long\" });\n  const month = dateObj.toLocaleString(\"default\", { month: \"long\" });\n  const dayNum = dateObj.getDate();\n  const date = `${dayName}, \" \"${dayNum} ${month}`\n  \n  const [data, setData] = useState(null);\n  const [weatherIcon, setWeatherIcon] = useState(null);\n\n  useEffect(() => {\n    Geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      fetchWeatherData(latitude, longitude).then((data) => {\n        setData(data);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if (data) {\n      const hour = new Date().getHours();\n      const weatherCondition = data.weather[0].main;\n      const weatherIcon = getWeatherIcon(weatherCondition, hour);\n      setWeatherIcon(weatherIcon);\n    }\n  }, [data]);\n\n\n\n  return (\n    <ImageBackground\n      style={styles.backgroundImage}\n      source={require(\"./assets/BG_Gradient.png\")}\n    >\n      <View style={styles.Datecontainer}>\n        <Text>\n          <Text style={styles.DateText}>\n            {date}\n          </Text>\n        </Text>\n      </View>\n      <View>\n        {data ? (\n          <View style={styles.CurrentLocation}>\n            <Text style={styles.CurrentLocationText}>{data.name}</Text>\n          </View>\n        ) : (\n          <Text style={styles.CurrentLocationText}>Loading...</Text>\n        )}\n      </View>\n      <View style={styles.weatherImage}>\n        <View>\n          <Image source={weatherIcon} style={{ width: 150, height: 150 }} />\n        </View>\n        <Text style={styles.weatherImageText}> {data ? data.weather[0].main : \"Loading...\"}</Text>\n      </View>\n      <View style={styles.temp}>\n        <Text style={styles.tempText}>\n          {data ? `${data.main.temp.toFixed(1)}Â°C` : \"Loading...\"}\n        </Text>\n      </View>\n    </ImageBackground>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1,\n  },\n\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\",\n  },\n\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\",\n  },\n\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"2rem\",\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    paddingTop: \"1rem\",\n  },\n  temp: {\n    marginTop: \"1rem\",\n  },\n  tempText: {\n    fontSize: \"4rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\",\n  },\n});\n\n// STYLESHEET ENDS\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,eAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAEnD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,qCAAqC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE9D,IAAMC,OAAO,GAAG,kCAAkC;AAElD,IAAMC,gBAAgB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,QAAQ,EAAEC,SAAS,EAAK;IACtD,IAAMC,GAAG,4DAA0DF,QAAQ,aAAQC,SAAS,eAAUL,OAAO,kBAAe;IAC5H,IAAMO,QAAQ,SAASC,KAAK,CAACF,GAAG,CAAC;IACjC,IAAMG,IAAI,SAASF,QAAQ,CAACG,IAAI,EAAE;IAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb,CAAC;EAAA,gBANKR,gBAAgBA,CAAAY,EAAA,EAAAC,GAAA;IAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,GAMrB;AAED,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,gBAAgB,EAAEC,IAAI,EAAK;EACjD,IAAMC,YAAY,GAAG;IACnBC,KAAK,EAAE,CACLC,OAAO,sBAAsB,EAC7BA,OAAO,2BAA2B,CACnC;IACDC,MAAM,EAAED,OAAO,uBAAuB;IACtCE,IAAI,EAAEF,OAAO,sBAAsB;IACnCG,KAAK,EAAEH,OAAO,sBAAsB;IACpCI,IAAI,EAAEJ,OAAO;EACf,CAAC;EAED,IAAIK,KAAK,CAACC,OAAO,CAACR,YAAY,CAACF,gBAAgB,CAAC,CAAC,EAAE;IACjD,IAAIC,IAAI,IAAI,EAAE,IAAIA,IAAI,IAAI,CAAC,EACzB,OAAOC,YAAY,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC1C,OAAOE,YAAY,CAACF,gBAAgB,CAAC,CAAC,CAAC,CAAC;EAC1C;EACA,OAAOE,YAAY,CAACF,gBAAgB,CAAC;AACvC,CAAC;AAED,eAAe,SAASW,GAAGA,CAAA,EAAG;EAE5B,IAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;EAC1B,IAAMC,OAAO,GAAGF,OAAO,CAACG,cAAc,CAAC,SAAS,EAAE;IAAEC,OAAO,EAAE;EAAO,CAAC,CAAC;EACtE,IAAMC,KAAK,GAAGL,OAAO,CAACG,cAAc,CAAC,SAAS,EAAE;IAAEE,KAAK,EAAE;EAAO,CAAC,CAAC;EAClE,IAAMC,MAAM,GAAGN,OAAO,CAACO,OAAO,EAAE;EAChC,IAAMC,IAAI,GAAMN,OAAO,eAAQI,MAAM,SAAID,KAAO;EAEhD,IAAAI,SAAA,GAAwBpD,QAAQ,CAAC,IAAI,CAAC;IAAAqD,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/B9B,IAAI,GAAA+B,UAAA;IAAEE,OAAO,GAAAF,UAAA;EACpB,IAAAG,UAAA,GAAsCxD,QAAQ,CAAC,IAAI,CAAC;IAAAyD,UAAA,GAAAH,cAAA,CAAAE,UAAA;IAA7CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAElCxD,SAAS,CAAC,YAAM;IACdO,WAAW,CAACoD,kBAAkB,CAAC,UAACC,QAAQ,EAAK;MAC3C,IAAAC,gBAAA,GAAgCD,QAAQ,CAACE,MAAM;QAAvC9C,QAAQ,GAAA6C,gBAAA,CAAR7C,QAAQ;QAAEC,SAAS,GAAA4C,gBAAA,CAAT5C,SAAS;MAC3BJ,gBAAgB,CAACG,QAAQ,EAAEC,SAAS,CAAC,CAAC8C,IAAI,CAAC,UAAC1C,IAAI,EAAK;QACnDiC,OAAO,CAACjC,IAAI,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENrB,SAAS,CAAC,YAAM;IACd,IAAIqB,IAAI,EAAE;MACR,IAAMU,IAAI,GAAG,IAAIY,IAAI,EAAE,CAACqB,QAAQ,EAAE;MAClC,IAAMlC,gBAAgB,GAAGT,IAAI,CAAC4C,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAC7C,IAAMT,YAAW,GAAG5B,cAAc,CAACC,gBAAgB,EAAEC,IAAI,CAAC;MAC1D2B,cAAc,CAACD,YAAW,CAAC;IAC7B;EACF,CAAC,EAAE,CAACpC,IAAI,CAAC,CAAC;EAIV,OACEV,KAAA,CAACV,eAAe;IACdkE,KAAK,EAAEC,MAAM,CAACC,eAAgB;IAC9BC,MAAM,EAAEpC,OAAO,4BAA6B;IAAAqC,QAAA,GAE5C9D,IAAA,CAACL,IAAI;MAAC+D,KAAK,EAAEC,MAAM,CAACI,aAAc;MAAAD,QAAA,EAChC9D,IAAA,CAACN,IAAI;QAAAoE,QAAA,EACH9D,IAAA,CAACN,IAAI;UAACgE,KAAK,EAAEC,MAAM,CAACK,QAAS;UAAAF,QAAA,EAC1BrB;QAAI;MACA;IACF,EACF,EACPzC,IAAA,CAACL,IAAI;MAAAmE,QAAA,EACFlD,IAAI,GACHZ,IAAA,CAACL,IAAI;QAAC+D,KAAK,EAAEC,MAAM,CAACM,eAAgB;QAAAH,QAAA,EAClC9D,IAAA,CAACN,IAAI;UAACgE,KAAK,EAAEC,MAAM,CAACO,mBAAoB;UAAAJ,QAAA,EAAElD,IAAI,CAACuD;QAAI;MAAQ,EACtD,GAEPnE,IAAA,CAACN,IAAI;QAACgE,KAAK,EAAEC,MAAM,CAACO,mBAAoB;QAAAJ,QAAA,EAAC;MAAU;IACpD,EACI,EACP5D,KAAA,CAACP,IAAI;MAAC+D,KAAK,EAAEC,MAAM,CAACS,YAAa;MAAAN,QAAA,GAC/B9D,IAAA,CAACL,IAAI;QAAAmE,QAAA,EACH9D,IAAA,CAACJ,KAAK;UAACiE,MAAM,EAAEb,WAAY;UAACU,KAAK,EAAE;YAAEW,KAAK,EAAE,GAAG;YAAEC,MAAM,EAAE;UAAI;QAAE;MAAG,EAC7D,EACPpE,KAAA,CAACR,IAAI;QAACgE,KAAK,EAAEC,MAAM,CAACY,gBAAiB;QAAAT,QAAA,GAAC,GAAC,EAAClD,IAAI,GAAGA,IAAI,CAAC4C,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,GAAG,YAAY;MAAA,EAAQ;IAAA,EACrF,EACPzD,IAAA,CAACL,IAAI;MAAC+D,KAAK,EAAEC,MAAM,CAACa,IAAK;MAAAV,QAAA,EACvB9D,IAAA,CAACN,IAAI;QAACgE,KAAK,EAAEC,MAAM,CAACc,QAAS;QAAAX,QAAA,EAC1BlD,IAAI,GAAMA,IAAI,CAAC6C,IAAI,CAACe,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,aAAO;MAAY;IAClD,EACF;EAAA,EACS;AAEtB;AAGA,IAAMf,MAAM,GAAGlE,UAAU,CAACkF,MAAM,CAAC;EAC/Bf,eAAe,EAAE;IACfgB,IAAI,EAAE;EACR,CAAC;EAEDb,aAAa,EAAE;IACbc,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EAEDf,QAAQ,EAAE;IACRgB,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE,SAAS;IACnBC,KAAK,EAAE,SAAS;IAChBC,SAAS,EAAE,QAAQ;IACnBC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE;EACb,CAAC;EAEDpB,eAAe,EAAE;IACfY,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EAEDb,mBAAmB,EAAE;IACnBc,UAAU,EAAE,YAAY;IACxBC,QAAQ,EAAE,QAAQ;IAClBK,WAAW,EAAE,CAAC,YAAY,CAAC;IAC3BJ,KAAK,EAAE,SAAS;IAChBE,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE;EACb,CAAC;EAEDjB,YAAY,EAAE;IACZS,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDR,gBAAgB,EAAE;IAChBU,QAAQ,EAAE,QAAQ;IAClBD,UAAU,EAAE,YAAY;IACxBE,KAAK,EAAE,SAAS;IAChBE,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE,QAAQ;IACnBN,UAAU,EAAE;EACd,CAAC;EACDP,IAAI,EAAE;IACJe,SAAS,EAAE;EACb,CAAC;EACDd,QAAQ,EAAE;IACRQ,QAAQ,EAAE,MAAM;IAChBD,UAAU,EAAE,YAAY;IACxBE,KAAK,EAAE,SAAS;IAChBE,UAAU,EAAE,KAAK;IACjBC,SAAS,EAAE;EACb;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}