{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport axios from \"axios\";\nimport Geolocation from \"@react-native-community/geolocation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\nvar fetchWeatherData = function () {\n  var _ref = _asyncToGenerator(function* (latitude, longitude) {\n    var url = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + latitude + \"&lon=\" + longitude + \"&appid=\" + API_KEY + \"&units=metric\";\n    var response = yield fetch(url);\n    var data = yield response.json();\n    console.log(data);\n    return data;\n  });\n  return function fetchWeatherData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getWeatherIcon = function getWeatherIcon(weather, hour) {\n  var weatherIcons = {\n    Clouds: [require(\"./assets/Sunny.png\"), require(\"./assets/ClearNight.png\")],\n    Rain: require(\"./assets/Rainy.png\"),\n    Windy: require(\"./assets/Windy.png\"),\n    Snow: require(\"./assets/Snowy.png\")\n  };\n  if (Array.isArray(weatherIcons[weather])) {\n    if (hour >= 18 || hour <= 6) return weatherIcons[weather][1];\n    return weatherIcons[weather][0];\n  }\n  return weatherIcons[weather];\n};\nexport default function App() {\n  var dateObj = new Date();\n  var month = dateObj.toLocaleString(\"default\", {\n    month: \"long\"\n  });\n  var day = dateObj.toLocaleDateString(\"en-US\", {\n    weekday: \"long\"\n  });\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  useEffect(function () {\n    Geolocation.getCurrentPosition(function (position) {\n      var _position$coords = position.coords,\n        latitude = _position$coords.latitude,\n        longitude = _position$coords.longitude;\n      fetchWeatherData(latitude, longitude).then(function (data) {\n        setData(data);\n      });\n    });\n  }, []);\n  return _jsx(\"h1\", {\n    children: \"HI\"\n  });\n}\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1\n  },\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\"\n  },\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\"\n  },\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\"\n  },\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"2rem\"\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    paddingTop: \"1rem\"\n  },\n  temp: {\n    marginTop: \"1rem\"\n  },\n  tempText: {\n    fontSize: \"4rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","ImageBackground","StyleSheet","Text","View","Image","axios","Geolocation","jsx","_jsx","API_KEY","fetchWeatherData","_ref","_asyncToGenerator","latitude","longitude","url","response","fetch","data","json","console","log","_x","_x2","apply","arguments","getWeatherIcon","weather","hour","weatherIcons","Clouds","require","Rain","Windy","Snow","Array","isArray","App","dateObj","Date","month","toLocaleString","day","toLocaleDateString","weekday","_useState","_useState2","_slicedToArray","setData","getCurrentPosition","position","_position$coords","coords","then","children","styles","create","backgroundImage","flex","Datecontainer","alignItems","justifyContent","paddingTop","DateText","fontFamily","fontSize","color","fontStyle","fontWeight","textAlign","CurrentLocation","CurrentLocationText","fontVariant","weatherImage","weatherImageText","temp","marginTop","tempText"],"sources":["F:/Weather-App/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ImageBackground, StyleSheet, Text, View, Image } from \"react-native\";\nimport axios from \"axios\";\nimport Geolocation from \"@react-native-community/geolocation\";\n\nconst API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\n\nconst fetchWeatherData = async (latitude, longitude) => {\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`;\n  const response = await fetch(url);\n  const data = await response.json();\n  console.log(data)\n  return data;\n};\n\nconst getWeatherIcon = (weather, hour) => {\n  const weatherIcons = {\n    Clouds: [\n      require(\"./assets/Sunny.png\"),\n      require(\"./assets/ClearNight.png\"),\n    ],\n    // Clouds: require(\"./assets/Cloudy.png\"),\n    Rain: require(\"./assets/Rainy.png\"),\n    Windy: require(\"./assets/Windy.png\"),\n    Snow: require(\"./assets/Snowy.png\"),\n  };\n\n  if (Array.isArray(weatherIcons[weather])) {\n    if (hour >= 18 || hour <= 6)\n      return weatherIcons[weather][1];\n    return weatherIcons[weather][0];\n  }\n  return weatherIcons[weather];\n}\n\nexport default function App() {\n\n  const dateObj = new Date();\n  const month = dateObj.toLocaleString(\"default\", { month: \"long\" });\n  const day = dateObj.toLocaleDateString(\"en-US\", { weekday: \"long\" });\n  \n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    Geolocation.getCurrentPosition((position) => {\n      const { latitude, longitude } = position.coords;\n      fetchWeatherData(latitude, longitude).then((data) => {\n        setData(data);\n      });\n    });\n  }, []);\n\n  // console.log(data);\n\n  // return (\n  //   <ImageBackground\n  //     style={styles.backgroundImage}\n  //     source={require(\"./assets/BG_Gradient.png\")}\n  //   >\n  //     <View style={styles.Datecontainer}>\n  //       <Text>\n  //         <Text style={styles.DateText}>\n  //           {day}, {month}\n  //         </Text>\n  //       </Text>\n  //     </View>\n  //     <View>\n  //       {weatherData ? (\n  //         <View style={styles.CurrentLocation}>\n  //           <Text style={styles.CurrentLocationText}>{weatherData.name}</Text>\n  //         </View>\n  //       ) : (\n  //         <Text style={styles.CurrentLocationText}>Loading...</Text>\n  //       )}\n  //     </View>\n  //     <View style={styles.weatherImage}>\n  //       <View>\n  //         <Image source={weatherIcon} style={{ width: 150, height: 150 }} />\n  //       </View>\n  //       <Text style={styles.weatherImageText}> {weather}</Text>\n  //     </View>\n  //     <View style={styles.temp}>\n  //       <Text style={styles.tempText}>\n  //         {temperature ? `${temperature}Â°C` : \"Loading...\"}\n  //       </Text>\n  //     </View>\n  //   </ImageBackground>\n  // );\n\n  return <h1>HI</h1>\n}\n\n// MAIN RENDER FUNCTION ENDS\n\n// STYLESHEET STARTS\n\nconst styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1,\n  },\n\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\",\n  },\n\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\",\n  },\n\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"2rem\",\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    paddingTop: \"1rem\",\n  },\n  temp: {\n    marginTop: \"1rem\",\n  },\n  tempText: {\n    fontSize: \"4rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\",\n  },\n});\n\n// STYLESHEET ENDS\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}