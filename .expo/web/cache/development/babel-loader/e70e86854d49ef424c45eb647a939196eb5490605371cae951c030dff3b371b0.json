{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport axios from \"axios\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentDay = _useState2[0],\n    setCurrentDay = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentDate = _useState4[0],\n    setCurrentDate = _useState4[1];\n  useEffect(function () {\n    var interval = setInterval(function () {\n      var dateObj = new Date();\n      setCurrentDay(dateObj.toLocaleDateString(\"en-US\", {\n        weekday: \"long\"\n      }));\n      var month = dateObj.toLocaleString(\"default\", {\n        month: \"long\"\n      });\n      var day = dateObj.getDate();\n      setCurrentDate(day + \" \" + month);\n    }, 1000);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\n  var CITY_NAME = \"Delhi,IN\";\n  useEffect(function () {\n    axios.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\" + CITY_NAME + \"&appid=\" + API_KEY).then(function (response) {\n      var data = response.data;\n      var forecast = data.list.filter(function (item) {\n        return item.dt_txt.includes('12:00:00');\n      });\n      setForecastData(forecast);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  }, []);\n  return _jsxs(ImageBackground, {\n    style: styles.backgroundImage,\n    source: require(\"./assets/BG_Gradient.png\"),\n    children: [_jsx(View, {\n      style: styles.Datecontainer,\n      children: _jsx(Text, {\n        children: _jsxs(Text, {\n          style: styles.DateText,\n          children: [currentDay, \", \", currentDate]\n        })\n      })\n    }), _jsx(View, {\n      style: styles.CurrentLocation,\n      children: _jsx(Text, {\n        style: styles.CurrentLocationText,\n        children: \"Sundarnagar\"\n      })\n    }), _jsxs(View, {\n      style: styles.weatherImage,\n      children: [_jsx(Image, {\n        source: require(\"./assets/PartlyCloudyDay.png\"),\n        style: {\n          width: 150,\n          height: 150\n        }\n      }), _jsx(Text, {\n        style: styles.weatherImageText,\n        children: \"Partly Cloudy\"\n      })]\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        children: location\n      }), _jsx(Text, {\n        children: temperature ? temperature + \" \\xB0C\" : 'Loading...'\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1\n  },\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\"\n  },\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\"\n  },\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\"\n  },\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"4rem\"\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\"\n  },\n  temp: {\n    marginTop: \"1rem\"\n  },\n  tempText: {\n    fontSize: \"5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","ImageBackground","StyleSheet","Text","View","Image","axios","jsxs","_jsxs","jsx","_jsx","App","_useState","_useState2","_slicedToArray","currentDay","setCurrentDay","_useState3","_useState4","currentDate","setCurrentDate","interval","setInterval","dateObj","Date","toLocaleDateString","weekday","month","toLocaleString","day","getDate","clearInterval","API_KEY","CITY_NAME","get","then","response","data","forecast","list","filter","item","dt_txt","includes","setForecastData","catch","error","console","log","style","styles","backgroundImage","source","require","children","Datecontainer","DateText","CurrentLocation","CurrentLocationText","weatherImage","width","height","weatherImageText","location","temperature","create","flex","alignItems","justifyContent","paddingTop","fontFamily","fontSize","color","fontStyle","fontWeight","textAlign","fontVariant","temp","marginTop","tempText"],"sources":["F:/Weather-App/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ImageBackground, StyleSheet, Text, View, Image } from \"react-native\";\nimport axios from \"axios\";\n\nexport default function App() {\n  const [currentDay, setCurrentDay] = useState(\"\");\n  const [currentDate, setCurrentDate] = useState(\"\");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const dateObj = new Date();\n      setCurrentDay(dateObj.toLocaleDateString(\"en-US\", { weekday: \"long\" }));\n      const month = dateObj.toLocaleString(\"default\", { month: \"long\" });\n      const day = dateObj.getDate();\n      setCurrentDate(`${day} ${month}`);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const API_KEY = \"fde70b7b510d418c6126c7433ab077c4\";\n  const CITY_NAME = \"Delhi,IN\";\n\n  useEffect(() => {\n    axios\n      .get(`https://api.openweathermap.org/data/2.5/forecast?q=${CITY_NAME}&appid=${API_KEY}`)\n      .then(response => {\n        const { data } = response;\n        const forecast = data.list.filter(item => item.dt_txt.includes('12:00:00'));\n        setForecastData(forecast);\n      })\n      .catch(error => console.log(error));\n  }, []);\n\n  return (\n    <ImageBackground\n      style={styles.backgroundImage}\n      source={require(\"./assets/BG_Gradient.png\")}\n    >\n      <View style={styles.Datecontainer}>\n        <Text>\n          <Text style={styles.DateText}>\n            {currentDay}, {currentDate}\n          </Text>\n        </Text>\n      </View>\n      <View style={styles.CurrentLocation}>\n        <Text style={styles.CurrentLocationText}>Sundarnagar</Text>\n      </View>\n      <View style={styles.weatherImage}>\n        <Image\n          source={require(\"./assets/PartlyCloudyDay.png\")}\n          style={{ width: 150, height: 150 }}\n        />\n        <Text style={styles.weatherImageText}>Partly Cloudy</Text>\n      </View>\n      <View>\n      <Text>{location}</Text>\n      <Text>{temperature ? `${temperature} Â°C` : 'Loading...'}</Text>\n    </View>\n    </ImageBackground>\n  );\n}\nconst styles = StyleSheet.create({\n  backgroundImage: {\n    flex: 1,\n  },\n\n  Datecontainer: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"7rem\",\n  },\n\n  DateText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.75rem\",\n    color: \"#f1f1f1\",\n    fontStyle: \"italic\",\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n\n  CurrentLocation: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\",\n  },\n\n  CurrentLocationText: {\n    fontFamily: \"Montserrat\",\n    fontSize: \"1.5rem\",\n    fontVariant: [\"small-caps\"],\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n\n  weatherImage: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingTop: \"4rem\",\n  },\n  weatherImageText: {\n    fontSize: \"1.5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n  temp: {\n    marginTop: \"1rem\",\n  },\n  tempText: {\n    fontSize: \"5rem\",\n    fontFamily: \"Montserrat\",\n    color: \"#f1f1f1\",\n    fontWeight: \"100\",\n    textAlign: \"center\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}